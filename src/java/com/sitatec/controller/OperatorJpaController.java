/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package com.sitatec.controller;

import com.sitatec.controller.exceptions.NonexistentEntityException;
import com.sitatec.controller.exceptions.PreexistingEntityException;
import com.sitatec.model.Operator;
import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;
import javax.persistence.EntityNotFoundException;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Root;

/**
 *
 * @author Julian
 */
public class OperatorJpaController {

    public OperatorJpaController() {
        emf = Persistence.createEntityManagerFactory("Sitatec_ProjectPU");
    }
    private EntityManagerFactory emf = null;

    public EntityManager getEntityManager() {
        return emf.createEntityManager();
    }

    public void bussinessLogicValidations(Operator operator) throws PreexistingEntityException, Exception {
        if (operator.getInitialRange() > operator.getFinalRange()) {
            throw new Exception("El rango de numeración es incorrecto.");
        }

        if (operator.getInitialRange() < 0) {
            throw new Exception("El rango de numeración inicial debe ser positivo.");
        }

        if (operator.getFinalRange() < 0) {
            throw new Exception("El rango de numeración final debe ser positivo.");
        }
    }

    public void create(Operator operator) throws PreexistingEntityException, Exception {
        EntityManager em = null;
        operator.setId(getAutogeneratedId());
        
        if (findOperatorByName(operator.getOperatorName()) != null) {
            throw new Exception("El operador " + operator.getOperatorName() + " ya existe.");
        }
        bussinessLogicValidations(operator);

        try {
            em = getEntityManager();
            em.getTransaction().begin();
            em.persist(operator);
            em.getTransaction().commit();
        } catch (Exception ex) {
            if (findOperator(operator.getId()) != null) {
                throw new PreexistingEntityException("Operator " + operator + " already exists.", ex);
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public Operator findOperatorByName(String operatorName) {
        for(Operator operator: findOperatorEntities()) {
            if(operator.getOperatorName().equals(operatorName)) {
                return operator;
            }
        }
        return null;
    }

    public Operator findOperatorByPhoneNumber(String phoneNumber) {
        for(Operator operator: findOperatorEntities()) {
            for(int i = operator.getInitialRange(); i <= operator.getFinalRange(); i++) {
                if(phoneNumber.startsWith(i + "")) {
                    return operator;
                }
            }
        }
        return null;
    }

    public int getAutogeneratedId() {
        return this.getOperatorCount() + 1;
    }

    public void edit(Operator operator) throws NonexistentEntityException, Exception {
        EntityManager em = null;

        bussinessLogicValidations(operator);

        try {
            em = getEntityManager();
            em.getTransaction().begin();
            operator = em.merge(operator);
            em.getTransaction().commit();
        } catch (Exception ex) {
            String msg = ex.getLocalizedMessage();
            if (msg == null || msg.length() == 0) {
                Integer id = operator.getId();
                if (findOperator(id) == null) {
                    throw new NonexistentEntityException("The operator with id " + id + " no longer exists.");
                }
            }
            throw ex;
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public void destroy(Integer id) throws NonexistentEntityException {
        EntityManager em = null;
        try {
            em = getEntityManager();
            em.getTransaction().begin();
            Operator operator;
            try {
                operator = em.getReference(Operator.class, id);
                operator.getId();
            } catch (EntityNotFoundException enfe) {
                throw new NonexistentEntityException("The operator with id " + id + " no longer exists.", enfe);
            }
            em.remove(operator);
            em.getTransaction().commit();
        } finally {
            if (em != null) {
                em.close();
            }
        }
    }

    public List<Operator> findOperatorEntities() {
        return findOperatorEntities(true, -1, -1);
    }

    public List<Operator> findOperatorEntities(int maxResults, int firstResult) {
        return findOperatorEntities(false, maxResults, firstResult);
    }

    private List<Operator> findOperatorEntities(boolean all, int maxResults, int firstResult) {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            cq.select(cq.from(Operator.class));
            Query q = em.createQuery(cq);
            if (!all) {
                q.setMaxResults(maxResults);
                q.setFirstResult(firstResult);
            }
            return q.getResultList();
        } finally {
            em.close();
        }
    }

    public Operator findOperator(Integer id) {
        EntityManager em = getEntityManager();
        try {
            return em.find(Operator.class, id);
        } finally {
            em.close();
        }
    }

    public int getOperatorCount() {
        EntityManager em = getEntityManager();
        try {
            CriteriaQuery cq = em.getCriteriaBuilder().createQuery();
            Root<Operator> rt = cq.from(Operator.class);
            cq.select(em.getCriteriaBuilder().count(rt));
            Query q = em.createQuery(cq);
            return ((Long) q.getSingleResult()).intValue();
        } finally {
            em.close();
        }
    }

}
